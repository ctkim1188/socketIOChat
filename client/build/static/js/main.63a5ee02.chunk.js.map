{"version":3,"sources":["components/Chat.jsx","App.js","serviceWorker.js","index.js"],"names":["props","useState","io","socket","msg","setMsg","messages","setMessages","useEffect","on","prevMessages","onSubmit","event","preventDefault","emit","type","name","value","onChange","target","map","index","key","App","console","log","data","className","Chat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAGe,WAAAA,GAAU,IAAD,EACHC,mBAASC,IAAG,UAAtBC,EADa,sBAECF,mBAAS,IAFV,mBAEdG,EAFc,KAETC,EAFS,OAGYJ,mBAAS,IAHrB,mBAGbK,EAHa,KAGHC,EAHG,KAKpBC,qBAAU,WACNL,EAAOM,GAAG,6BAA6B,SAAAL,GACnCG,GAAY,SAAAG,GACR,MAAM,CAACN,GAAP,mBAAcM,YAGxB,IAUF,OACI,oCACA,0BAAMC,SAVc,SAAAC,GAKpB,OAJAA,EAAMC,iBACNV,EAAOW,KAAK,oBAAqBV,GACjCG,EAAY,CAACH,GAAF,mBAAUE,KACrBD,EAAO,KACA,IAMH,6CAA0B,GAC1B,6BACA,2BAAOU,KAAO,cAAcC,KAAO,WAAWC,MAASb,EAAKc,SAAY,SAACN,GAAD,OAAWP,EAAOO,EAAMO,OAAOF,UACvG,2CAEHX,EAASc,KAAI,SAAChB,EAAKiB,GAChB,OACI,uBAAGC,IAAOD,GAAV,IAAmBjB,EAAnB,UCRDmB,MArBf,WAAe,MAGGtB,mBAASC,IAAG,UAAtBC,EAHO,oBAUb,OALAK,qBAAU,WACRgB,QAAQC,IAAI,oBACZtB,EAAOM,GAAG,WAAW,SAAAiB,GAAI,OAAIF,QAAQC,IAAIC,QACxC,IAGD,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wDAEE,kBAACC,EAAD,SCRUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63a5ee02.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport io from 'socket.io-client'\r\n\r\nexport default props => {\r\n    const [socket] = useState(io(':7000'));\r\n    const[msg, setMsg] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.on('send_data_to_other_client', msg => {\r\n            setMessages(prevMessages => {\r\n                return[msg,...prevMessages];\r\n            })\r\n        });\r\n    },[]);\r\n\r\n    const onSubmitHandler = event =>{\r\n        event.preventDefault();\r\n        socket.emit('event_from_client', msg);\r\n        setMessages([msg, ...messages]);\r\n        setMsg(\"\");\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit ={onSubmitHandler}>\r\n            <label>your text:</label>{''}\r\n            <br/>\r\n            <input type = \"description\" name = \"chatText\" value = {msg} onChange = {(event) => setMsg(event.target.value)} />\r\n            <button>submit</button>\r\n        </form>\r\n        {messages.map((msg, index)=> {\r\n            return(\r\n                <p key = {index}> {msg} </p>\r\n            )\r\n        })}\r\n        </>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport Chat from './components/Chat';\n\nfunction App() {\n\n  //passing the port number we assigned\n  const[socket] = useState(io(':7000'));\n\n  useEffect(() => {\n    console.log(\"this is running?\");\n    socket.on('Welcome', data => console.log(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome to the Chat ROOM!\n        </p>\n          <Chat/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}